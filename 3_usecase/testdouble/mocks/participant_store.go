// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aimzeter/wuts/3_usecase (interfaces: ParticipantStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	three "github.com/aimzeter/wuts/3_usecase"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockParticipantStore is a mock of ParticipantStore interface
type MockParticipantStore struct {
	ctrl     *gomock.Controller
	recorder *MockParticipantStoreMockRecorder
}

// MockParticipantStoreMockRecorder is the mock recorder for MockParticipantStore
type MockParticipantStoreMockRecorder struct {
	mock *MockParticipantStore
}

// NewMockParticipantStore creates a new mock instance
func NewMockParticipantStore(ctrl *gomock.Controller) *MockParticipantStore {
	mock := &MockParticipantStore{ctrl: ctrl}
	mock.recorder = &MockParticipantStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParticipantStore) EXPECT() *MockParticipantStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockParticipantStore) Create(arg0 three.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockParticipantStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockParticipantStore)(nil).Create), arg0)
}

// Get mocks base method
func (m *MockParticipantStore) Get(arg0 string) three.Participant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(three.Participant)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockParticipantStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockParticipantStore)(nil).Get), arg0)
}

// Update mocks base method
func (m *MockParticipantStore) Update(arg0 three.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockParticipantStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockParticipantStore)(nil).Update), arg0)
}
